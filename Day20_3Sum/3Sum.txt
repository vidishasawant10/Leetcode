Here's a line-by-line explanation of the code:

class Solution:: This line defines a class called Solution.

def threeSum(self, nums: List[int]) -> List[List[int]]:: This line defines a function called threeSum that takes in a list of integers nums and returns a list of lists of integers. The self parameter is used in class methods but is not used in this implementation.

nums.sort(): This line sorts the input list nums in ascending order.

n = len(nums): This line assigns the length of the input list nums to a variable called n.

result = []: This line creates an empty list called result that will store the resulting triplets.

for i in range(n-2):: This line starts a loop that iterates over the elements in the input list nums, with the exception of the last two elements. This is because a triplet requires at least three distinct elements.

if i > 0 and nums[i] == nums[i-1]: continue: This line skips over duplicates of the current element, which would result in duplicates in the output triplets. This check is performed by comparing the current element to the previous element and skipping the current iteration if they are the same.

l = i + 1: This line initializes a pointer l to the element immediately after the current element.

r = n - 1: This line initializes a pointer r to the last element in the list.

while l < r:: This line starts a loop that continues until l is greater than or equal to r. This loop is used to check all possible combinations of two distinct elements in the list that can be added to the current element to get a sum of zero.

total = nums[i] + nums[l] + nums[r]: This line calculates the sum of the current element, the element pointed to by l, and the element pointed to by r.

if total < 0: l += 1: This line increments l to point to the next element if the sum is less than zero.

elif total > 0: r -= 1: This line decrements r to point to the previous element if the sum is greater than zero.

else: result.append([nums[i], nums[l], nums[r]]): This line adds the triplet [nums[i], nums[l], nums[r]] to the result list if the sum is zero.

l += 1: This line increments l to the next distinct element.

r -= 1: This line decrements r to the previous distinct element.

while l < r and nums[l] == nums[l-1]: l += 1: This line skips over duplicates of the element pointed to by l. This check is performed by comparing the current element to the previous element and incrementing l to the next distinct element if they are the same.

while l < r and nums[r] == nums[r+1]: r -= 1: This line skips over duplicates of the element pointed to by r. This check is performed by comparing the current element to the next element and decrementing r to the previous distinct element if they are the same.

return result: This line returns the list of resulting triplets that sum to zero.
